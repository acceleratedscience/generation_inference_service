{"service_type": "generate_data", "description": "\n    Configuration to generate protein given a continuous property target and a partial AAs.\n\n    Implementation from the paper: https://arxiv.org/abs/2202.01338. It can also predict the property given a full sequence.\n\n    Examples:\n        An example for generating a peptide around a desired property value::\n\n            config = RegressionTransformerProteins(\n                search='sample', temperature=2, tolerance=5\n            )\n            target = \"<stab>1.1234|TTIKNG[MASK][MASK][MASK]YTVPLSPEQAAK[MASK][MASK][MASK]KKRWPDYEVQIHGNTVKVT\"\n            stability_generator = RegressionTransformer(\n                configuration=config, target=target\n            )\n            list(stability_generator.sample(5))\n\n        An example for predicting the stability of a peptide::\n\n            config = RegressionTransformerProteins(search='greedy')\n            target = \"<stab>[MASK][MASK][MASK][MASK][MASK]|GSQEVNSNASPEEAEIARKAGATTWTEKGNKWEIRI\"\n            stability_generator = RegressionTransformer(\n                configuration=config, target=target\n            )\n            list(stability_generator.sample(1))\n    ", "target": {"title": "Masked input sequence", "description": "A sequence with a property value and an AAS. Masking can either occur on the property or on the AAS, but not both.", "type": "string"}, "generator_type": {"algorithm_application": "RegressionTransformerProteins", "domain": "materials", "algorithm_name": "RegressionTransformer", "algorithm_type": "conditional_generation"}, "algorithm_versions": ["stability"], "service_name": "generate with RegressionTransformerProteins", "service_description": "", "valid_types": ["RegressionTransformerProteins"], "type_description": {}, "parameters": {"algorithm_version": {"title": "Algorithm Version", "description": "The version of the algorithm to use.", "default": "stability", "options": ["stability"], "type": "string"}, "search": {"title": "Search", "description": "Search algorithm to use for the generation: sample or greedy", "default": "sample", "type": "string"}, "temperature": {"title": "Temperature", "description": "Temperature parameter for the softmax sampling in decoding.", "default": 1.4, "type": "number"}, "batch_size": {"title": "Batch Size", "description": "Batch size for the conditional generation", "default": 32, "type": "integer"}, "tolerance": {"title": "Tolerance", "description": "Precision tolerance for the conditional generation task. This is the\n            tolerated eviation between desired/primed property and predicted property of the\n            generated molecule. Given in percentage with respect to the property range encountered\n            during training. Either a single float or a dict of floats with properties as\n            NOTE: The tolerance is *only* used for post-hoc filtering of the generated proteins.\n            ", "default": 20.0, "anyOf": [{"type": "number"}, {"type": "object", "additionalProperties": {"type": "number"}}]}, "sampling_wrapper": {"title": "Sampling Wrapper", "description": "High-level entry point for SMILES-level access. Provide a\n            dictionary that is used to build a custom sampling wrapper.\n            NOTE: If this is used, the `target` needs to be a single SMILES string.\n            Example: {\n                'fraction_to_mask': 0.5,\n                'tokens_to_mask': [],\n                'property_goal': {'<qed>': 0.85}\n            }\n            - 'fraction_to_mask' specifies the ratio of tokens that can be changed by\n                the model.\n            - 'tokens_to_mask' specifies which atoms can be masked. This defaults\n                to an empty list, meaning that all tokens can be masked.\n            - 'property_goal' specifies the target conditions for the generation. The\n                properties need to be specified as a dictionary. The keys need to be\n                properties supported by the algorithm version.\n            ", "type": "object"}}, "required_parameters": [], "category": "generation", "sub_category": "generates", "wheel_package": "", "GPU": true, "persistent": true, "help": ""}